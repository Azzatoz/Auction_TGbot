import os
import django
from django.middleware.csrf import get_token
import telebot
from telebot import types
import requests
import uuid  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ CSRF —Ç–æ–∫–µ–Ω–∞
from django.conf import settings
import datetime
import pytz
import logging
from django.views.decorators.csrf import csrf_exempt

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auction_project.settings')
django.setup()

from auction.models import User, UserProfile

BOT_TOKEN = '7075474227:AAG8Y7jASasiq9pumKmQQn_7L7dTikdF3T4'
CHANNEL_ID = '-1002148978810'
BOT_USERNAME = "My_UniQ_auction_bot"
bot = telebot.TeleBot(BOT_TOKEN)

info_text = """–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫. 
–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –¢–†–ï–• –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.
–ù–ï –í–´–ö–£–ü –õ–û–¢–ê - –ë–ê–ù.
"""


def create_auction_message(lot):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–æ—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    :param lot:
    :return:
    """
    message = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {lot.get('title', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {lot.get('description', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')}\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {lot.get('current_bid', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')}–†\n"
        f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {lot.get('seller_link', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')}\n"
        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {lot.get('location', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')}\n\n"
        f"–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: {lot.get('next_bid', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')}\n"
    )

    return message


def send_lot_to_channel(lot):
    """
    –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –≤ –∫–∞–Ω–∞–ª
    :param lot:
    :return:
    """
    message = create_auction_message(lot)
    markup = types.InlineKeyboardMarkup()
    timer_button = types.InlineKeyboardButton("‚è≤ –¢–∞–π–º–µ—Ä", callback_data=f"timer_{lot['id']}")
    info_button = types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info")
    open_lot_button = types.InlineKeyboardButton("üõç –û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç", url=generate_deep_link(lot['id']))
    markup.add(timer_button, info_button, open_lot_button)

    if lot.get('images'):
        with open(lot['images'], 'rb') as photo:
            message_id = bot.send_photo(CHANNEL_ID, photo, caption=message, reply_markup=markup).message_id
    else:
        message_id = bot.send_message(CHANNEL_ID, message, reply_markup=markup).message_id

    return message_id


def generate_deep_link(lot_id):
    """
    —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ª–æ—Ç–æ–º
    :param lot_id:
    :return:
    """
    return f"https://t.me/{BOT_USERNAME}?start={lot_id}"


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("timer_") or call.data == "info" or call.data.startswith("open_lot_"))
def callback_query(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    :param call:
    :return:
    """
    if call.data.startswith("timer_"):
        lot_id = int(call.data.split("_")[1])
        response = requests.get(f'http://localhost:8000/lots/{lot_id}/')
        if response.status_code == 200:
            lot = response.json()
            end_time = datetime.datetime.fromisoformat(lot['end_time']).replace(tzinfo=pytz.UTC)
            now = datetime.datetime.now(pytz.UTC)
            time_remaining = end_time - now
            bot.answer_callback_query(call.id, f"–õ–æ—Ç –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑: {time_remaining}")

    elif call.data == "info":
        bot.answer_callback_query(call.id, info_text, show_alert=True, cache_time=0)

    elif call.data.startswith("open_lot_"):
        lot_id = int(call.data.split("_")[1])
        deep_link = generate_deep_link(lot_id)
        bot.answer_callback_query(call.id, deep_link, show_alert=True, cache_time=0)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    args = message.text.split()
    if len(args) > 1:
        lot_id = args[1]
        response = requests.get(f'http://localhost:8000/lots/{lot_id}/')
        if response.status_code == 200:
            lot = response.json()
            lot_message = create_auction_message(lot)
            markup = types.InlineKeyboardMarkup()
            timer_button = types.InlineKeyboardButton("‚è≤ –¢–∞–π–º–µ—Ä", callback_data=f"timer_{lot_id}")
            info_button = types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info")
            next_bid = lot.get('next_bid', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get() —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            bid_button = types.InlineKeyboardButton(f"–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É {next_bid}–†", callback_data=f"bid_{lot_id}")
            hidden_bid_button = types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∫—Ä—ã—Ç—É—é —Å—Ç–∞–≤–∫—É",
                                                           callback_data=f"hidden_bid_{lot_id}")
            media_button = types.InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ", callback_data=f"media_{lot_id}")
            custom_price_button = types.InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É",
                                                             callback_data=f"custom_price_{lot_id}")
            back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
            markup.add(timer_button, info_button)
            markup.add(bid_button)
            markup.add(hidden_bid_button)
            markup.add(media_button)
            markup.add(custom_price_button)
            markup.add(back_button)
            bot.send_message(message.chat.id, lot_message, reply_markup=markup)
    else:
        send_main_menu(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('bid_'))
def confirm_bid(call):
    lot_id = call.data.split('_')[1]
    user_id = call.from_user.id
    markup = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"confirm_bid_{lot_id}_{user_id}")
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
    markup.add(confirm_button, back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_bid_'))
def place_bid_bot(call):
    try:
        _, action, lot_id, user_id = call.data.split('_', 3)
        user, created = User.objects.get_or_create(username=user_id)
        if created:
            UserProfile.objects.create(user=user)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF-—Ç–æ–∫–µ–Ω–∞
        csrf_token_response = requests.get('http://localhost:8000/get_csrf_token/')
        csrf_token = csrf_token_response.json()['csrf_token']

        headers = {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/json'
        }
        json_data = {"user_id": user.id}

        response = requests.post(f'http://localhost:8000/lots/{lot_id}/place_bid/', json=json_data, headers=headers)
        if response.status_code == 200:
            lot = response.json()
            lot_message = create_auction_message(lot)
            markup = types.InlineKeyboardMarkup()
            timer_button = types.InlineKeyboardButton("‚è≤ –¢–∞–π–º–µ—Ä", callback_data=f"timer_{lot_id}")
            info_button = types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info")
            bid_button = types.InlineKeyboardButton(f"–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É {lot['next_bid']}–†", callback_data=f"bid_{lot_id}")
            hidden_bid_button = types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∫—Ä—ã—Ç—É—é —Å—Ç–∞–≤–∫—É",
                                                           callback_data=f"hidden_bid_{lot_id}")
            media_button = types.InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ", callback_data=f"media_{lot_id}")
            custom_price_button = types.InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É",
                                                             callback_data=f"custom_price_{lot_id}")
            back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
            markup.add(timer_button, info_button)
            markup.add(bid_button)
            markup.add(hidden_bid_button)
            markup.add(media_button)
            markup.add(custom_price_button)
            markup.add(back_button)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=lot_message,
                                  reply_markup=markup)
        else:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            send_main_menu(call.message)

    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
def go_back(call):
    send_main_menu(call.message)


def send_main_menu(message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    :param message:
    :return:
    """
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @My_UniQ_auction_bot\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏ –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞.\n"
        "–ê —Ç–∞–∫–∂–µ –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –±–∞–ª–ª–∞–º–∏.\n\n"
        "–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤."
    )
    markup = types.InlineKeyboardMarkup()
    my_lots_button = types.InlineKeyboardButton("–ú–æ–∏ –ª–æ—Ç—ã", callback_data="my_lots")
    rules_button = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")
    giveaway_button = types.InlineKeyboardButton("–†–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="giveaway")
    leaderboard_button = types.InlineKeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")
    markup.add(my_lots_button, rules_button)
    markup.add(giveaway_button)
    markup.add(leaderboard_button)
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["my_lots", "rules", "help", "giveaway", "leaderboard"])
def handle_main_menu_options(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    :param call:
    :return:
    """
    try:
        if call.data == "my_lots":
            user_id = call.from_user.id
            response = requests.get(f'http://localhost:8000/user_lots/{user_id}/')
            if response.status_code == 200:
                lots = response.json()
                if 'message' in lots:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text=lots['message'])
                else:
                    for lot in lots:
                        lot_message = create_auction_message(lot)
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              text=lot_message)
                    add_main_menu_button(call.message)
            else:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ª–æ—Ç—ã.")
                add_main_menu_button(call.message)

        elif call.data == "rules":
            rules_text = (
                "–ü—Ä–∞–≤–∏–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞:\n"
                "1. –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.\n"
                "2. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä–µ—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.\n"
                "3. –ù–µ–≤—ã–∫—É–ø –ª–æ—Ç–∞ - –±–∞–Ω."
            )
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=rules_text)
            add_main_menu_button(call.message)

        elif call.data == "help":
            help_text = (
                "–ü–æ–º–æ—â—å –ø–æ –∞—É–∫—Ü–∏–æ–Ω—É:\n"
                "1. –ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n"
                "2. –ö–Ω–æ–ø–∫–∞ '–ú–æ–∏ –ª–æ—Ç—ã' - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ª–æ—Ç–æ–≤.\n"
                "3. –ö–Ω–æ–ø–∫–∞ '–ü—Ä–∞–≤–∏–ª–∞' - –ø—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ.\n"
                "4. –ö–Ω–æ–ø–∫–∞ '–†–û–ó–´–ì–†–´–®' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö.\n"
                "5. –ö–Ω–æ–ø–∫–∞ '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤' - —Ç–µ–∫—É—â–∏–µ –ª–∏–¥–µ—Ä—ã –∞—É–∫—Ü–∏–æ–Ω–∞."
            )
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=help_text)
            add_main_menu_button(call.message)

        elif call.data == "giveaway":
            giveaway_text = (
                "–¢–µ–∫—É—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:\n"
                "1. –†–æ–∑—ã–≥—Ä—ã—à –ª–æ—Ç–∞ 1 - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ!\n"
                "2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 - 4500 –±–∞–ª–ª–æ–≤.\n"
                "3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 - 4000 –±–∞–ª–ª–æ–≤."
            )
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=giveaway_text)
            add_main_menu_button(call.message)

        elif call.data == "leaderboard":
            leaderboard_text = "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ –±—É–¥–µ—Ç —Ç—É—Ç"
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=leaderboard_text)
            add_main_menu_button(call.message)

    except Exception as e:
        print(f"Error in handle_main_menu_options: {str(e)}")


def add_main_menu_button(message):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    :param message:
    :return:
    """
    markup = types.InlineKeyboardMarkup()
    main_menu_button = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    markup.add(main_menu_button)
    bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id, reply_markup=markup)


def run_bot():
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """
    bot.infinity_polling()


if __name__ == '__main__':
    run_bot()

