from django.shortcuts import get_object_or_404
from django.http import JsonResponse
from .models import Lot, CompletedAuction
import telebot
import datetime
import logging

logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot('7075474227:AAG8Y7jASasiq9pumKmQQn_7L7dTikdF3T4')


def get_lot_info(request, lot_id):
    lot = get_object_or_404(Lot, id=lot_id)
    lot_data = {
        "title": lot.title,
        "description": lot.description,
        "start_price": lot.start_price,
        "seller_link": lot.seller.telegram_link,
        "end_time": lot.end_time.isoformat(),
    }
    return JsonResponse(lot_data)


def send_all_active_auctions_to_channel(request):
    logging.info("–§—É–Ω–∫—Ü–∏—è send_all_active_auctions_to_channel –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞")
    active_lots = Lot.objects.filter(end_time__gt=datetime.datetime.now(), is_sold=False)
    channel_id = '-1002148978810'

    if not active_lots:
        logging.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return JsonResponse({"status": "success", "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"})

    for lot in active_lots:
        lot_message = f"{lot.title}\n\n{lot.description}\n\n–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {lot.start_price}–†\n–ü—Ä–æ–¥–∞–≤–µ—Ü: {lot.seller.telegram_link}"
        markup = telebot.types.InlineKeyboardMarkup()
        timer_button = telebot.types.InlineKeyboardButton("‚è≤ –¢–∞–π–º–µ—Ä", callback_data=f"timer_{lot.id}")
        info_button = telebot.types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info")
        open_lot_button = telebot.types.InlineKeyboardButton("üõç –û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç", callback_data=f"open_lot_{lot.id}")
        markup.add(timer_button, info_button, open_lot_button)

        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ—Ç–∞ {lot.title} –≤ –∫–∞–Ω–∞–ª")
        bot.send_message(channel_id, lot_message, reply_markup=markup, disable_notification=True)

    return JsonResponse({"status": "success", "message": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª"})


def mark_lot_as_sold(request, lot_id, buyer_id):
    lot = get_object_or_404(Lot, id=lot_id)
    buyer = get_object_or_404(User, id=buyer_id)
    lot.is_sold = True
    lot.save()

    completed_auction = CompletedAuction.objects.create(
        lot=lot,
        final_price=lot.start_price,
        buyer=buyer,
        is_paid=True
    )

    return JsonResponse({"status": "success", "message": f"–õ–æ—Ç {lot.title} –ø—Ä–æ–¥–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é {buyer.username}"})


def retry_unsold_lots(request):
    unsold_lots = CompletedAuction.objects.filter(is_paid=False)
    for auction in unsold_lots:
        lot = auction.lot
        lot.is_sold = False
        lot.save()
        auction.delete()

    return JsonResponse({"status": "success", "message": "–í—Å–µ –Ω–µ –≤—ã–∫—É–ø–ª–µ–Ω–Ω—ã–µ –ª–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É."})
